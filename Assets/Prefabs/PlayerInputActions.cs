//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Prefabs/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""3c3b5253-4c07-445a-866b-b60303a4ab4e"",
            ""actions"": [
                {
                    ""name"": ""Spawn1"",
                    ""type"": ""Value"",
                    ""id"": ""cd4bb42f-3646-4f5b-8e55-d170d8df5660"",
                    ""expectedControlType"": ""Key"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Spawn2"",
                    ""type"": ""Button"",
                    ""id"": ""2b419399-47d5-43c5-82e7-bd050552017f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Spawn3"",
                    ""type"": ""Button"",
                    ""id"": ""eb0a35d0-4aa3-4a6f-b834-d012914a6ca3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Spawn4"",
                    ""type"": ""Button"",
                    ""id"": ""16369cce-09cc-4980-b8d8-9aa07d96b722"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""54dfaab1-548e-4644-b9be-4b8165592fda"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spawn1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""673ff533-5824-4f96-9c27-9afe35551e68"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spawn2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""856d9f0f-2a88-44a0-92fa-e93e52456b55"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spawn3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e54edef8-60dd-4106-aa6b-b65ecb85e337"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spawn4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Spawn1 = m_Player.FindAction("Spawn1", throwIfNotFound: true);
        m_Player_Spawn2 = m_Player.FindAction("Spawn2", throwIfNotFound: true);
        m_Player_Spawn3 = m_Player.FindAction("Spawn3", throwIfNotFound: true);
        m_Player_Spawn4 = m_Player.FindAction("Spawn4", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Spawn1;
    private readonly InputAction m_Player_Spawn2;
    private readonly InputAction m_Player_Spawn3;
    private readonly InputAction m_Player_Spawn4;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Spawn1 => m_Wrapper.m_Player_Spawn1;
        public InputAction @Spawn2 => m_Wrapper.m_Player_Spawn2;
        public InputAction @Spawn3 => m_Wrapper.m_Player_Spawn3;
        public InputAction @Spawn4 => m_Wrapper.m_Player_Spawn4;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Spawn1.started += instance.OnSpawn1;
            @Spawn1.performed += instance.OnSpawn1;
            @Spawn1.canceled += instance.OnSpawn1;
            @Spawn2.started += instance.OnSpawn2;
            @Spawn2.performed += instance.OnSpawn2;
            @Spawn2.canceled += instance.OnSpawn2;
            @Spawn3.started += instance.OnSpawn3;
            @Spawn3.performed += instance.OnSpawn3;
            @Spawn3.canceled += instance.OnSpawn3;
            @Spawn4.started += instance.OnSpawn4;
            @Spawn4.performed += instance.OnSpawn4;
            @Spawn4.canceled += instance.OnSpawn4;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Spawn1.started -= instance.OnSpawn1;
            @Spawn1.performed -= instance.OnSpawn1;
            @Spawn1.canceled -= instance.OnSpawn1;
            @Spawn2.started -= instance.OnSpawn2;
            @Spawn2.performed -= instance.OnSpawn2;
            @Spawn2.canceled -= instance.OnSpawn2;
            @Spawn3.started -= instance.OnSpawn3;
            @Spawn3.performed -= instance.OnSpawn3;
            @Spawn3.canceled -= instance.OnSpawn3;
            @Spawn4.started -= instance.OnSpawn4;
            @Spawn4.performed -= instance.OnSpawn4;
            @Spawn4.canceled -= instance.OnSpawn4;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnSpawn1(InputAction.CallbackContext context);
        void OnSpawn2(InputAction.CallbackContext context);
        void OnSpawn3(InputAction.CallbackContext context);
        void OnSpawn4(InputAction.CallbackContext context);
    }
}
